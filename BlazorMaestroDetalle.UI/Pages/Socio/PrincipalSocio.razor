@page "/PrincipalSocio"
@using Pages.Prestamo;
@using Models;
@using Pages.Libro;
@using Services;

@inject SocioService SocioService;
@inject NavigationManager NavigationManager;


<h1>Información de socios</h1>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="socio" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />

            <div class="form-group">
                <div class="input-group mb-3">
                    <span class="input-group-text input-title">Nombre</span>
                    <InputText id="nombre" class="form-control" @bind-Value="@socio.Nombre" />
                    <span class="input-group-text"> <i class="oi oi-person"></i></span>
                </div>
                <ValidationMessage For="@(() => socio.Nombre)" />
            </div>
           
            <div class="form-group">
                <div class="input-group mb-3">
                    <span class="input-group-text input-title" >Apellido</span>
                    <InputText id="apellidos" class="form-control" @bind-Value="@socio.Apellidos" />
                    <span class="input-group-text" > <i class="oi oi-person"></i></span>
                </div>
                <ValidationMessage For="@(() => socio.Apellidos)" />
            </div>
            
            <div class="form-group">
                <div class="input-group mb-3">
                    <span class="input-group-text input-title">Telefono</span>
                    <InputText id="telefono" class="form-control" @bind-Value="@socio.Telefono" />
                    <span class="input-group-text"> <i class="oi oi-phone"></i></span>
                </div>
                <ValidationMessage For="@(() => socio.Telefono)" />
            </div>
            <div class="form-group">
                <div class="input-group mb-3">
                    <span class="input-group-text input-title">Correo</span>
                    <InputText id="correo" class="form-control" @bind-Value="@socio.Correo"></InputText>
                    <span class="input-group-text"> <i class="oi oi-envelope-closed"></i></span>
                </div>
                <ValidationMessage For="@(() => socio.Correo)" />
            </div>
            <div class="form-group">
                <div class="input-group mb-3">
                    <span class="input-group-text input-title">Ingreso</span>
                    <InputDate id="ingreso" class="form-control" @bind-Value="@socio.Ingreso" />
                    <span class="input-group-text" > <i class="oi oi-calendar"></i></span>
                </div>
                <ValidationMessage For="@(() => socio.Ingreso)" />
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-primary">Guardar </button>
            </div>
            
        </EditForm>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            <div class="input-group mb-3">
                <span class="input-group-text input-title">Foto</span>
                <InputFile id="imagen" class="form-control" @ref="imagenInput" OnChange="CargarImagen" />
            </div>
        </div>
        <div class="form-group">
            <div class="input-group mb-3">
                <div class="preview-container">
                    @if (rutaImagen != null)
                    {
                        <img src="@rutaImagen" alt="Preview" class="preview-image" />
                    }
                    else
                    {
                        <img src="/socios/default.jpg" alt="Preview" class="preview-image" />
                    }
                    
                </div>
            </div>
        </div>
    </div>


</div>
<br>



<div class="btn-group">
    
    @foreach (var item in types)
    {
        if(Array.IndexOf(types,item) == selected)
        {
            <button class="btn btn-primary">@item.Name</button>
        }
        else
        {
            <button class="btn btn-secondary" @onclick="()=> selected = Array.IndexOf(types,item)">@item.Name</button>
        }

    }
    
</div>
<br>
<br>

@GetRenderFragment(types[selected])



@code {
    Socio socio = new Socio();
    string rutaImagen;
    InputFile imagenInput;

    int selected;
    ComponentBase[] componentes = { new ListaSocios(), new HistorialPrestamos(), new ListarLibros(), new AgregarLibro(), new SolicitarPrestamo() };
    Type[] types => componentes.Select(c => c.GetType()).ToArray();

    RenderFragment GetRenderFragment(Type type)
    {
        RenderFragment renderFragment = renderTreeBuilder =>
        {
            renderTreeBuilder.OpenComponent(0, type);
            renderTreeBuilder.CloseComponent();
        };
        return renderFragment;
    }


    protected override void OnInitialized()
    {
        socio.Ingreso = DateTime.Now.Date;
    }

    protected async Task Guardar()
    {
        socio.RutaImagen = rutaImagen;  // Asigna la ruta de la imagen al modelo Socio
        await SocioService.Agregar(socio);

        socio.Nombre = null;
        socio.Apellidos = null;
        socio.Correo = null;
        socio.Telefono = null;
        rutaImagen = "/socios/default.jpg";

    }


    private async Task CargarImagen(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        var nombreArchivo = archivo.Name;  
        //string nombreArchivo = socio.Nombre + socio.Apellidos +".jpg"; 

        using (var memoryStream = new MemoryStream())
        {
            await archivo.OpenReadStream().CopyToAsync(memoryStream);
            byte[] buffer = memoryStream.ToArray();
           
            var rutaDestino = Path.Combine("wwwroot", "socios", nombreArchivo); // Ruta de destino en la carpeta dentro de "wwwroot"
            File.WriteAllBytes(rutaDestino, buffer);
            rutaImagen = "/socios/" + nombreArchivo; // Actualiza la ruta de la imagen con la ruta relativa a "socios"
        }
    }



    

}
